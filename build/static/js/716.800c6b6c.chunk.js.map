{"version":3,"file":"static/js/716.800c6b6c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport { Helmet } from \"react-helmet\";\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n\n    const {comicId} = useParams();\n    const [comic, setComic] = useState(null);\n    const {loading, error, clearError, getComic}= useMarvelService();\n\n    useEffect(() => {\n        updateComic()\n    }, [comicId])\n\n    const updateComic = () => {\n        clearError();\n        getComic(comicId)\n        .then(onComicLoaded)\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({comic}) => {\n    const {name, description, pageCount, img, price, language} = comic;\n\n    return (\n        <div className=\"single-comic\">\n        <Helmet>\n            <meta\n                name=\"description\"\n                content={`${name} comics book`}\n            />\n            <title>{name}</title>\n        </Helmet>\n            <img src={img} alt={name} className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{name}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">{language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n        </div>\n    )\n}\n\nexport default SingleComicPage;","import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'})=> {\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hooks\";\n\nconst useMarvelService = () => {\n\n    const {loading, error, request, clearError} = useHttp();\n\n    const _baseOffSet = 210;\n\n    \n    const getAllCharacters = async (offset = _baseOffSet) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters?orderBy=modified&limit=9&offset=${offset}&apikey=fb362d4261f1e307fa153563545a7b83`);\n        return res.data.results.map(_transformCharacter);\n    }\n    const getCharacter = async (id) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n        return _transformCharacter(res.data.results[0]);\n    }\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/characters?nameStartsWith=${name}&apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const getAllComics = async () => {\n        const res = await request (`https://gateway.marvel.com:443/v1/public/comics?apikey=fb362d4261f1e307fa153563545a7b83\n        `);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/comics/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            name: comics.title,\n            img: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$`\n            : \"not available\",\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic};\n}\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","name","description","pageCount","price","language","_jsxs","className","children","Helmet","content","concat","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","clearError","getComic","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_transformCharacter","char","id","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","prices","textObjects","getAllCharacters","offset","results","map","getCharacter","res","getCharacterByName","getAllComics"],"sourceRoot":""}