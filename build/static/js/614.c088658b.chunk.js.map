{"version":3,"file":"static/js/614.c088658b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleCharPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport { Helmet } from \"react-helmet\";\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './singleCharPage.scss';\n\nconst SingleCharPage = () => {\n\n    const {charId} = useParams();\n    const [char, setChar] = useState(null);\n    const {loading, error, clearError, getCharacter} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [charId])\n\n    const updateChar = () => {\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"single-char\">\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content={`${name} character`}\n                />\n                <title>{name}</title>\n            </Helmet>\n            <img src={thumbnail} alt={name} className=\"single-char__img\" style={imgStyle}/>\n            <div className=\"single-char__info\">\n                <h2 className=\"single-char__name\">{name}</h2>\n                <p className=\"single-char__descr\">{description}</p>\n                <div className=\"single-char__comics\">Comics:</div>\n                <ul className=\"single-char__comics__list\">\n                    {comics.length > 0 ? null : 'There are no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            // eslint-disable-next-line\n                            if(i > 9) return;\n                            return(\n                                <li key={i} className=\"single-char__comics__list__item\">{item.name}</li>\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n            <Link to=\"/\" className=\"single-char__back\">Back to all</Link>\n        </div>\n    )\n}\n\nexport default SingleCharPage;","import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'})=> {\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hooks\";\n\nconst useMarvelService = () => {\n\n    const {loading, error, request, clearError} = useHttp();\n\n    const _baseOffSet = 210;\n\n    \n    const getAllCharacters = async (offset = _baseOffSet) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters?orderBy=modified&limit=9&offset=${offset}&apikey=fb362d4261f1e307fa153563545a7b83`);\n        return res.data.results.map(_transformCharacter);\n    }\n    const getCharacter = async (id) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n        return _transformCharacter(res.data.results[0]);\n    }\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/characters?nameStartsWith=${name}&apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const getAllComics = async () => {\n        const res = await request (`https://gateway.marvel.com:443/v1/public/comics?apikey=fb362d4261f1e307fa153563545a7b83\n        `);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/comics/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            name: comics.title,\n            img: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$`\n            : \"not available\",\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic};\n}\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","comics","imgStyle","_jsxs","className","children","Helmet","content","concat","length","map","item","i","Link","to","SingleCharPage","charId","useParams","setChar","useState","loading","error","clearError","getCharacter","useMarvelService","useEffect","updateChar","then","onCharLoaded","errorMessage","spinner","Spinner","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_transformCharacter","id","slice","path","extension","homepage","urls","wiki","items","_transformComics","_comics$textObjects$","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","results","res","getCharacterByName","getAllComics","getComic"],"sourceRoot":""}