{"version":3,"file":"static/js/907.e43d7946.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst ComicsList = (props) => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setoffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    },[])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded);\n    }\n\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(ComicsList => [...ComicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setoffset(offset => offset + 9);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.img} alt={item.name} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.name}</div>\n                        <div className=\"comics__item-price\">{`${item.price} $`}</div>\n                    </Link>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n            className=\"button button__main button__long\"\n            disabled={newItemLoading} \n            style={{'display' : comicsEnded ? 'none' : 'block'}}\n            onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from '../appBanner/AppBanner';\n\nconst ComicsPage = () => {\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics Page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'})=> {\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hooks\";\n\nconst useMarvelService = () => {\n\n    const {loading, error, request, clearError} = useHttp();\n\n    const _baseOffSet = 210;\n\n    \n    const getAllCharacters = async (offset = _baseOffSet) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters?orderBy=modified&limit=9&offset=${offset}&apikey=fb362d4261f1e307fa153563545a7b83`);\n        return res.data.results.map(_transformCharacter);\n    }\n    const getCharacter = async (id) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n        return _transformCharacter(res.data.results[0]);\n    }\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/characters?nameStartsWith=${name}&apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const getAllComics = async () => {\n        const res = await request (`https://gateway.marvel.com:443/v1/public/comics?apikey=fb362d4261f1e307fa153563545a7b83\n        `);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/comics/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            name: comics.title,\n            img: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$`\n            : \"not available\",\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic};\n}\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","props","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setoffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","ComicsList","items","arr","map","item","i","className","children","_jsxs","Link","to","concat","id","name","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","AppBanner","avengers","avengersLogo","ComicsPage","_Fragment","Helmet","content","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_transformCharacter","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","title","prices","pageCount","language","textObjects","getAllCharacters","results","getCharacter","res","getCharacterByName","getComic"],"sourceRoot":""}