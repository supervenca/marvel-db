{"version":3,"file":"static/js/509.01fc66ed.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/searchBar/SearchBar.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport { Link } from 'react-router-dom';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 600000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n       getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                <Link to={`/characters/${char.id}`} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                </Link>\n                <a href={wiki} className=\"button button__secondary\">\n                    <div className=\"inner\">Wiki</div>\n                </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharlist] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setoffset] = useState(210);\n    const [charEnded, setcharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    //пустой массив во втором аргументе: функция будет вызываться только 1 раз, когда все отрендерилось\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n\n    const onCharListLoaded = async (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharlist(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setoffset(offset => offset + 9);\n        setcharEnded(charEnded => ended);    \n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition timeout={500} classNames=\"char__item\">\n                        <li \n                            className=\"char__item\"\n                            tabIndex={0}\n                            ref={el => itemRefs.current[i] = el}\n                            key={item.id}\n                            onClick={() => {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }}\n                            onKeyPress={(e) => {\n                                if (e.key === ' ' || e.key === \"Enter\") {\n                                    props.onCharSelected(item.id);\n                                    focusOnItem(i);\n                                }\n                            }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                        </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n        \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    \n    const [char, setChar] = useState(null);\n    const {loading, error, clearError, getCharacter}= useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {'objectFit' : 'contain'};\n            }\n    return (\n        <>\n            <div className=\"char__basics\">\n                \n                <img style={imgStyle} src={thumbnail} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <Link to={`/characters/${char.id}`} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </Link>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There are no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if(i > 9) return;\n                        return(\n                            <li key={i} className=\"char__comics-item\">{item.name}</li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Formik, Field, Form, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport {Link} from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './searchBar.scss';\n\nconst SearchBar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n\n    const result = !char ? null : char.length > 0 ? \n        <div className='search-wrapper search-wrapper__result'>\n            <p className='search__success'>The character was found! Visit {char[0].name} page?</p>\n            <Link to={`/characters/${char[0].id}`} className='button button__secondary'>\n                <div className='inner'>TO PAGE</div>\n            </Link>\n        </div> : \n        <div className='search-wrapper search-wrapper__result'>\n            <p className='search__error'>The character was not found. Check the name and try again</p>\n        </div>;\n    \n    return (\n        <div className='search'>\n            <Formik \n            initialValues={{\n                charName: ''\n            }}\n            validationSchema = {Yup.object({\n                charName: Yup.string()\n                        .min(2, 'Minimum 2 symbols required')\n                        .required('This field is required')\n            })}\n            onSubmit={ ({charName}) => {\n                updateChar(charName);\n            }}\n        >\n            <Form>\n                <div className='search__heading'>Or find a character by name:</div>\n                <div className='search-wrapper'>\n                    <Field \n                        className='search__input' \n                        type='text' \n                        name='charName'\n                        id='charName'\n                        placeholder='Enter name'/>\n                    <button \n                        type='submit' \n                        className='button button__main'\n                        disabled={loading}>\n                        <div className='inner'>find</div>\n                    </button>\n                </div>\n                <div className='search-wrapper search-wrapper__result'>\n                    <FormikErrorMessage component=\"div\" className=\"search__error\" name=\"charName\" />\n                </div>\n            </Form>\n            </Formik>\n            {result}\n            {errorMessage}\n        </div>\n        \n\n\n        // <div className='search'>\n        //     <div className='search__heading'>Or find a character by name:</div>\n        //     <div className='search-wrapper'>\n        //         <input className='search__input' type='text' placeholder='Enter name'></input>\n        //         <a href=\"#\" className='button button__main'><div className='inner'>find</div></a>\n        //     </div>\n        //     {/* <div className='search-wrapper search-wrapper__result'>\n        //         <p className='search__success'>The character was found! Visit name page?</p>\n        //         <a href=\"#\" className='button button__secondary'><div className='inner'>TO PAGE</div></a>\n        //     </div> */}\n        //     {/* <div className='search-wrapper search-wrapper__result'>\n        //         <p className='search__error'>The character was not found. Check the name and try again</p>\n        //     </div> */}\n\n            \n        // </div>\n    )\n}\n\nexport default SearchBar;","import { Component} from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo){\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render(){\n        if(this.state.error){\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport SearchBar from \"../searchBar/SearchBar\";\n\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    \n    const [selectedChar, setChar] = useState(null);\n    const onCharSelected = (id) => {\n        setChar(id)\n    }\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <SearchBar/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n\n}\n\nexport default MainPage;","import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'})=> {\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            setLoading(false);\n\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hooks\";\n\nconst useMarvelService = () => {\n\n    const {loading, error, request, clearError} = useHttp();\n\n    const _baseOffSet = 210;\n\n    \n    const getAllCharacters = async (offset = _baseOffSet) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters?orderBy=modified&limit=9&offset=${offset}&apikey=fb362d4261f1e307fa153563545a7b83`);\n        return res.data.results.map(_transformCharacter);\n    }\n    const getCharacter = async (id) => {\n        const res = await request(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n        return _transformCharacter(res.data.results[0]);\n    }\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/characters?nameStartsWith=${name}&apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const getAllComics = async () => {\n        const res = await request (`https://gateway.marvel.com:443/v1/public/comics?apikey=fb362d4261f1e307fa153563545a7b83\n        `);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`https://gateway.marvel.com:443/v1/public/comics/${id}?apikey=fb362d4261f1e307fa153563545a7b83`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            name: comics.title,\n            img: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            price: comics.prices[0].price ? `${comics.prices[0].price}$`\n            : \"not available\",\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic};\n}\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","wiki","imgStyle","_jsxs","className","children","Link","to","concat","id","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharlist","newItemLoading","setNewItemLoading","offset","setoffset","charEnded","setcharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","SearchBar","getCharacterByName","result","Formik","initialValues","charName","validationSchema","Yup","min","required","onSubmit","Form","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_transformCharacter","slice","path","extension","homepage","urls","_transformComics","_comics$textObjects$","title","price","prices","pageCount","language","textObjects","results","res","getAllComics","getComic"],"sourceRoot":""}